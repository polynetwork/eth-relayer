/*
* Copyright (C) 2020 The poly network Authors
* This file is part of The poly network library.
*
* The poly network is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* The poly network is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU Lesser General Public License for more details.
* You should have received a copy of the GNU Lesser General Public License
* along with The poly network . If not, see <http://www.gnu.org/licenses/>.
 */
package tools

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/polynetwork/eth-contracts/go_abi/eccm_abi"
	"strings"
	"testing"
)

func TestGetProof(t *testing.T) {
	//client := utils.NewRestClient()
	//res, err := GetProof("http://139.219.131.74:10331",
	//	"0xf6dc652e2f7ab7a20d1cc4156d5a7122a9e966a5",
	//	"0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d",
	//	"0x5e852e",
	//	client)
	//if err != nil {
	//	fmt.Printf("err:%s\n", err)
	//	return
	//}
	//fmt.Printf("res is :%s\n", res)

	contractabi, err := abi.JSON(strings.NewReader(eccm_abi.EthCrossChainManagerABI))
	if err != nil {
		t.Fatal(err)
	}
	m := contractabi.Methods["verifyHeaderAndExecuteTx"]
	v := make(map[string]interface{})
	raw, _ := hex.DecodeString("d450e04c00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000000d8d720a28713d235af51c57caa72dcd15a03d90b58e556815c3fce00920039b23b69ba03000000000000002042c68490953a2c765239b8302a723eb40846ff5c164db2109dac0a663594f211086e10000000000000149775c048e3708fe6a1477286137103995dabb486020000000000000014250e76987d838a75310c34bf422ea9f1ac4cc90606756e6c6f636b4a14dac17f958d2ee523a2206206994597c13d831ec714b8f98d08f1a456d1ec9417e5eaf46fc2ede9c0a1542e351802000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c500000000000000000000000044bda5c58dcfa76efd6df51a788a04c216d25ee4aba9bba79263ce7668757f9100000000000000000000000000000000000000000000000000000000000000004998066a7d8766e03e8bc462ed836cf26681091cc489783bdf9486d0cf09c084fb9aad596f78661d5da1fb080aed6aebe741f4d2e4e7a1154f954f0b01b78bd3009ca95fc41e190032949bcd720f5b2afd12017b226c6561646572223a322c227672665f76616c7565223a22424f4a77465930785047696b3955426d5039417a7249394848654c7a7a4d704d7435493756374b3876707049715a746d5774574446527338677668347349302b6e4435624e47336e6e7a36482f6b4477394d55596b49383d222c227672665f70726f6f66223a226249386d626c5465376c41553459476e6b77495265774235624247547363484b33517258414c4477556448595244735831646c4f59415161736449782f49384678672f414b7270687569444d5143642b412b714e45673d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a313632303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000294205ddc9b140e74d0a90358cebec5608ee7934a5aa4219093ec2c5d8c043c291b4d00ac5b4fd7e1a5e1dfa921ff2a72083e2a35c9bf37ca5a218711bf4bde3384790001911ada0d1d385985fa7101cf4956a591393752e884321920f48295392de0476b00cb8222697fa56e76e5ded403c6c4ab0cd87823f3c5babbc4f8b580e6ca2117e2016dfa51c6805f817234946582c89b4bf89b36801132b540aeda179c863eb418c6016456f1e5a63d1cda1b9687766828811df791ec69f9fa204f9f3578b58a8c805d01357564b15258c1863842c17047096f645b082536c6115eddeebbc6409d0a5990005427c7b495c8f816942e80c5e641c405d4c734f14a47a2d6c16b83158489b2e000c254d31447fb0de49394a219c24141f2cd93c6644f1e7566290ca39cd1b3d159014163de8640064e2ca1847a57feebef961797b9259e3bd15aa9838b381eeb160100d817f2857436026cf927d72243979d92b3c330b0208a3d1a54be9a8736e3ed2800acc6cdafd2a5977d42c1bee420afa22c4401bb5c401ae7f13ed4e0a11b0f7c8a0085be9c3e9cb770b6482cf9445368093155bbd5dc32014a37b4e7c925290177ef00889ffae5961f6c556812366191abfdf383b749b673647405955e7780657f262201132b4ccb644da30b30a32edd31cf644b1a508aff25b47cf788aca6dcb55e70df017394afbe3f8512e68fe756c484b9366aed7b47382eb4346d02860d979e2c8b1b0190bad70067a7a314e691c7abc49e07554de132d2df730ac8bd8d222f1971a13b00bdb0697b147f5d962108ad0c73ee888c0ed12fdb8c84ea417435472c7c5ed35200decbc116764f8dfb569d09f81c58b5480bcf87604a8538934ee71e75413c9480001e3f2d2e7eb592ae50f807aa819d4186c47d09e779a059f96e269ee4e4cdd3a700000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5000000000000000000000000a6d6a2b1eafe577cbc64466e84ac1b8df3bc50719977e2dea6a42ad02ceb1b6a3e300ad43ab75bc58e6eca59309b5fe7c4d90babfa9df804c2c0f3d481c0781700000000000000000000000000000000000000000000000000000000000000009a5171d6c53959abe19d3518c23fdcb0fb763e25c3f0462c32a7a1d89359b86d3a36ab5f81a21900489cd22e3d1dec2bfd12017b226c6561646572223a322c227672665f76616c7565223a22424251653968643754646535332b515348446f5130574b51386f7265516e304e6770596466654632632b436165623947574b39514b6235324a4155752b4b526573736849477352544965354831557a75475731392b72673d222c227672665f70726f6f66223a226c34595458396c665334422b303943345a4c71534c4e2f474d6544544135442b7a4f4a6f6e3864775233766674796b7666372b384649455a4770412f4c7a565433707131462f4f7673353662706a3632714f466f69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a313638303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c370642479b13a9587061d007bc5fa112128f4edd75eed53474b01f34be1208ef62110443c04776a844ff8c2d20f403a4c7bbd1895e35f55d80272d69529d2a3af0131051c7339707e1bb9426e8897f6fb003527c8dcfb960ec75b1a43ee4fe1dfad24d51b963cba2408b61886efd8e0dc685b5efad834572dca6b8e85f062def4750064e212eb4ea567ea7c7c1e8eaefafb5106e942c384c9070c5f3095d5b7f5d3712a26f14a8972defaeb92306ea16fc59b466d259fcaf9e4241123110b48a20f04000000000000000000000000000000000000000000000000000000000000")
	raw = bytes.TrimPrefix(raw, m.ID)

	err = m.Inputs.UnpackIntoMap(v, raw)
	if err != nil {
		t.Fatal(err)
	}

	fmt.Println(v)

}
